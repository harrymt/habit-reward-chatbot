#!/usr/bin/env node

'use strict';

console.log('Sending reminders..');

// Send to logging service
const request = require('request-promise');

const options = {
  method: 'GET',
  uri: 'https://nosnch.in/9e699ea11f'
};
request(options)
  .then(response => {
    console.log(response);
    sendReminders();
  })
  .catch(err => {
    console.log(err);
    sendReminders();
  });

/**
 * Actually send the reminders
 */
function sendReminders() {
  const Bot = require('../bot');

  let quickReplyActions = [
    'Completed Habit',
    'Not Today',
    'Snooze'
  ];

  // Decide what period of the day it is
  const dayHour = (new Date()).getUTCHours();
  let timeOfDay = '';


  if (dayHour === Bot.time.morning) {
    timeOfDay = 'MORNING';
  } else if (dayHour === Bot.time.afternoon) {
    timeOfDay = 'AFTERNOON';
  } else if (dayHour === Bot.time.evening) {
    timeOfDay = 'EVENING';
  } else if (dayHour === Bot.time.night) {
    timeOfDay = 'NIGHT';
    // Remove snooze if its the night
    quickReplyActions = [
      'Completed Habit',
      'Not Today'
    ];
  } else if (dayHour === Bot.time.newDay) {
    console.log('Resetting snooze time');
    // Reset snooze time
    quickReplyActions = null;
    timeOfDay = '';
  } else {
    // Not time todo things
    console.log('Not time to send reminders... time: ' + dayHour + ' date: ' + (new Date()).toUTCString());
    console.log('Reminder times are: ' + JSON.stringify(Bot.time));
    process.exit();
  }

  let filter = '';

  if (timeOfDay !== '') {
    filter = '({reminderTime} = "' + timeOfDay + '")';
  }

  if (process.env.NODE_ENV !== 'production') {
    // Load the .env file, that sets process.env.
    require('dotenv').load();
  }

  const FB = require('../connectors/facebook');

  // Debug Logging!
  console.log('We got a reminder at time: ' + timeOfDay);

  // Get all users based on time
  // Setup online database, airtable
  const base = require('airtable').base('app5u2vOBmkjxLp4M');

  let i = 0;
  base('Users').select({
    filterByFormula: filter
  }).eachPage(function page(records, fetchNextPage) {

    records.forEach(record => {
      console.log('Found user ' + record.fields.fbid);

      if (record.fields.habit === undefined) {
        console.log('User hasn\'t told us their habit');
        console.log('Looking for next user');
        fetchNextPage();
      } else {
        if (quickReplyActions === null) {
          console.log('Sending final nightime messages');
          // Reset snooze time
          const userData = record.fields;
          userData.id = record.getId();
          userData.snoozedReminderTime = record.fields.reminderTime;

          Bot.updateUser(userData, () => {
            FB.newMessage(record.get('fbid'), {
              text: 'You haven\'t logged any time today. Try again tomorrow.'
            },
            (msg, data) => {
              i++;
              if (data.error) {
                console.log('Error sending new fb message');
                console.log(msg); // Log received info
                console.log(data); // Log recieved info
              }
              console.log('Looking for next user');
              fetchNextPage();
            });
          });
        } else {
          FB.newMessage(record.get('fbid'),
            Bot.createQuickReply(
              'Hey, have you completed your daily ' + Bot.convertToFriendlyName(record.get('habit')) + '?',
              quickReplyActions
            ),
            (msg, data) => {
              i++;
              if (data.error) {
                console.log('Error sending new fb message');
                console.log(msg); // Log received info
                console.log(data); // Log recieved info
              }
              console.log('Looking for next user');
              fetchNextPage();
            }
          );
        }
      }
    });
  }, function done(err) {
    if (err) {
      console.error(err);
      throw new Error(err);
    }
    console.log('Sent ' + timeOfDay + ' reminders to ' + i + ' users.');
    process.exit();
  });
}
